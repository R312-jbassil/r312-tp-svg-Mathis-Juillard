---
import Layout from '../layouts/Layout.astro';
---
<Layout>
  <div class="flex items-center justify-between mb-6">
    <div class="breadcrumbs text-sm"><ul><li><a href="/" class="link">Accueil</a></li><li>Générateur</li></ul></div>
    <div class="badge badge-lg">Hugging Face</div>
  </div>

  <!-- carte prompt -->
  <div class="card bg-base-100 shadow-xl border border-base-300 mb-6">
    <div class="card-body gap-3">
      <h2 class="card-title">Entrer un prompt</h2>
      <label class="form-control w-full">
        <div class="label">
          <span class="label-text">Prompt</span>
          <span class="label-text-alt">Décris l’objet à dessiner</span>
        </div>
        <textarea id="user-prompt" class="textarea textarea-bordered min-h-28" placeholder="a red car"></textarea>
      </label>

      <div class="card-actions justify-end">
        <button id="clear" class="btn btn-ghost">Effacer</button>
        <button id="generate-button" class="btn btn-primary">Générer</button>
      </div>

      <div id="alert" class="hidden"></div>
    </div>
  </div>

  <!-- résultats -->
  <div class="grid gap-6 grid-cols-1 lg:grid-cols-2">
    <div class="card bg-base-100 shadow-xl border border-base-300">
      <div class="card-body">
        <h2 class="card-title">Aperçu</h2>
        <div id="svg-container" class="min-h-72 rounded-box border border-base-300 grid place-items-center">
          <span class="opacity-60">Le SVG généré s’affichera ici</span>
        </div>
      </div>
    </div>

    <div class="card bg-base-100 shadow-xl border border-base-300">
      <div class="card-body">
        <h2 class="card-title">Code SVG</h2>
        <pre class="mockup-code text-sm overflow-auto max-h-[520px]"><code id="svg-output" class="whitespace-pre-wrap break-words"></code></pre>
        <div class="card-actions justify-between">
          <a href="/library" class="btn btn-ghost btn-sm">Bibliothèque</a>
          <div class="join">
            <button id="copy" class="btn btn-secondary btn-sm join-item">Copier</button>
            <button id="save" class="btn btn-primary btn-sm join-item">Enregistrer</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- modal de sauvegarde -->
  <dialog id="saveModal" class="modal">
    <div class="modal-box">
      <h3 class="font-bold text-lg mb-2">Enregistrer le SVG</h3>
      <form id="saveForm" class="space-y-3">
        <label class="form-control">
          <span class="label-text mb-1">Nom</span>
          <input id="svg-title" type="text" class="input input-bordered" placeholder="Ex: Voiture rouge" required />
        </label>
        <div class="modal-action">
          <button type="button" class="btn" onclick="saveModal.close()">Annuler</button>
          <button type="submit" class="btn btn-primary">Enregistrer</button>
        </div>
      </form>
    </div>
    <form method="dialog" class="modal-backdrop"><button>close</button></form>
  </dialog>
</Layout>

<script type="module">
  const $ = (s) => document.querySelector(s);
  const $$ = (s) => Array.from(document.querySelectorAll(s));

  const btn = $('#generate-button');
  const clearBtn = $('#clear');
  const out = $('#svg-output');
  const box = $('#svg-container');
  const alertBox = $('#alert');
  const copyBtn = $('#copy');
  const saveBtn = $('#save');
  const modal = /** @type {HTMLDialogElement|null} */ (document.getElementById('saveModal'));
  const saveForm = /** @type {HTMLFormElement|null} */ (document.getElementById('saveForm'));
  const titleInput = /** @type {HTMLInputElement|null} */ (document.getElementById('svg-title'));
  const promptEl = /** @type {HTMLTextAreaElement|null} */ (document.getElementById('user-prompt'));

  let lastSVG = ""; // stocke le dernier SVG généré

  const showAlert = (type, text) => {
    alertBox.className = `alert alert-${type} mb-2`;
    alertBox.textContent = text;
  };

  async function generateSVG(prompt) {
    const res = await fetch('/api/generateSVG', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ prompt }),
    });
    const txt = await res.text();
    let data;
    try { data = JSON.parse(txt); }
    catch { throw new Error(`Réponse non-JSON: ${txt.slice(0,120)}…`); }
    if (!res.ok) throw new Error(data.error || 'Erreur API');
    return data.svg;
  }

  async function handleSubmit() {
    const prompt = (promptEl?.value || '').trim();
    if (!prompt) return showAlert('warning', 'Écris un prompt avant de générer.');

    alertBox.className = 'hidden';
    box.innerHTML = `<span class="loading loading-ring loading-lg"></span>`;
    out.textContent = '';
    btn.disabled = true;

    try {
      const svg = await generateSVG(prompt);
      if (!svg) {
        showAlert('info', "Le modèle n'a pas renvoyé de balise <svg>.");
        box.innerHTML = `<div class="opacity-60">Aucun SVG détecté</div>`;
        lastSVG = "";
        return;
      }
      out.textContent = svg;
      box.innerHTML = svg;
      lastSVG = svg;
    } catch (e) {
      console.error(e);
      showAlert('error', String(e?.message ?? 'Erreur de génération'));
      box.innerHTML = `<div class="opacity-60">Erreur…</div>`;
      lastSVG = "";
    } finally {
      btn.disabled = false;
    }
  }

  btn?.addEventListener('click', handleSubmit);
  clearBtn?.addEventListener('click', () => {
    if (promptEl) promptEl.value = '';
    out.textContent = '';
    box.innerHTML = `<span class="opacity-60">Le SVG généré s’affichera ici</span>`;
    alertBox.className = 'hidden';
    lastSVG = "";
  });

  copyBtn?.addEventListener('click', async () => {
    try {
      await navigator.clipboard.writeText(out.textContent || '');
      showAlert('success', 'SVG copié dans le presse-papiers ✅');
    } catch {
      showAlert('error', 'Impossible de copier');
    }
  });

  saveBtn?.addEventListener('click', () => {
    if (!lastSVG) return showAlert('warning', 'Génère un SVG avant d’enregistrer.');
    titleInput && (titleInput.value = '');
    modal?.showModal();
  });

  saveForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const title = (titleInput?.value || '').trim();
    if (!title || !lastSVG) return;

    try {
      const res = await fetch('/api/saveSVG', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ title, svg: lastSVG }),
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data.error || 'Erreur API');
      modal?.close();
      showAlert('success', 'Enregistré ✅  (voir Bibliothèque)');
    } catch (err) {
      showAlert('error', String(err?.message ?? err));
    }
  });
</script>
